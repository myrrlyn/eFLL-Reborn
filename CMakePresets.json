{
    "version": 7,
    "cmakeMinimumRequired": {
        "major": 3,
        "minor": 27,
        "patch": 0
    },
    "configurePresets": [
        {
            "name": "base",
            "hidden": true,
            "generator": "Ninja Multi-Config",
            "binaryDir": "${sourceDir}/build/${presetName}",
            "installDir": "${sourceDir}/build/out",
            "cacheVariables": {
                "CMAKE_BUILD_TYPE": "Debug",
                "CMAKE_EXPORT_COMPILE_COMMANDS": true,
                "CMAKE_VERBOSE_MAKEFILE": false,
                "CMAKE_POLICY_DEFAULT_CMP0123": "NEW",
                "eFLL_BUILD_EXAMPLES": false,
                "eFLL_BUILD_TESTS": false,
                "eFLL_BUILD_DOCS": false,
                "eFLL_ENABLE_CLANG_TIDY": false,
                "eFLL_ENABLE_CODE_COVERAGE": false
            },
            "vendor": {
                "microsoft.com/VisualStudioSettings/CMake/1.0": {
                    "intelliSenseMode": "linux-gcc-arm"
                }
            }
        },
        {
            "name": "base-host",
            "hidden": true,
            "description": "Base configuration for host development",
            "inherits": "base",
            "cacheVariables": {
                "eFLL_BUILD_HOSTED": true,
                "eFLL_BUILD_TESTS": true
            }
        },
        {
            "name": "base-host-clang",
            "hidden": true,
            "description": "Base configuration for host development with Clang/LLVM",
            "inherits": "base-host",
            "cacheVariables": {
                "CMAKE_CXX_COMPILER": "clang++",
                "CMAKE_C_COMPILER": "clang",
                "CMAKE_INSTALL_PREFIX": "${sourceDir}/build/install",
                "eFLL_ENABLE_CODE_COVERAGE": false
            }
        },
        {
            "name": "base-target",
            "hidden": true,
            "description": "On-target configuration baseline",
            "inherits": "base",
            "cacheVariables": {
                "eFLL_BUILD_EMBEDDED": true,
                "eFLL_BUILD_EXAMPLES": true,
                "TOOLCHAIN_DISABLE_RTTI": true,
                "TOOLCHAIN_DISABLE_EXCEPTIONS": true,
                "TOOLCHAIN_ENABLE_LTO": false
            }
        },
        {
            "name": "target-gcc",
            "hidden": true,
            "description": "On-target GCC baseline",
            "inherits": "base-target",
            "toolchainFile": "${sourceDir}/cmake/toolchains/gcc/gcc_arm_m4f_toolchain.cmake",
            "cacheVariables": {}
        },
        {
            "name": "arm32-stm32u575-none-gcc",
            "hidden": true,
            "displayName": "STM32U575/GCC",
            "description": "STM32U575 development with GCC",
            "inherits": "target-gcc"
        },
        {
            "name": "x64-pc-windows-msvc",
            "displayName": "Windows/MSVC",
            "description": "Hosted development with MSVC",
            "inherits": "base-host",
            "toolchainFile": "${sourceDir}/cmake/toolchains/msvc/Windows.MSVC.toolchain.cmake",
            "environment": {
                "eFLL_ENABLE_CODE_COVERAGE": "OFF"
            }
        },
        {
            "name": "x64-pc-windows-msvc-clangtidy",
            "displayName": "Windows/MSVC + Clang-Tidy",
            "description": "Hosted development with MSVC and Clang-Tidy",
            "inherits": "x64-pc-windows-msvc",
            "environment": {
                "eFLL_ENABLE_CODE_COVERAGE": "ON"
            }
        },
        {
            "name": "x64-pc-windows-clang",
            "displayName": "Windows/Clang",
            "description": "Hosted development with Clang",
            "inherits": "base-host-clang",
            "environment": {
                "eFLL_ENABLE_CODE_COVERAGE": "ON"
            },
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Windows"
            }
        },
        {
            "name": "x64-unknown-unix-clang",
            "displayName": "*nix/Clang",
            "description": "Hosted development with Clang, on a Unix-ish system",
            "inherits": "base-host-clang",
            "environment": {
                "eFLL_ENABLE_CODE_COVERAGE": "OFF"
            },
            "condition": {
                "type": "notEquals",
                "lhs": "${hostSystemName}",
                "rhs": "Windows"
            }
        }
    ],
    "buildPresets": [
        {
            "name": "x64-unix",
            "displayName": "Unix library",
            "description": "builds the library on a Unix-ish system",
            "configurePreset": "x64-unknown-unix-clang"
        }
    ],
    "testPresets": [
        {
            "name": "base-windows",
            "displayName": "All unit tests",
            "description": "Provides every test defined",
            "configurePreset": "x64-pc-windows-msvc",
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Windows"
            },
            "output": {
                "shortProgress": true
            }
        },
        {
            "name": "clang-windows",
            "displayName": "Unit tests, built with Clang",
            "description": "Provides every test defined, using Clang",
            "configurePreset": "x64-pc-windows-clang",
            "inherits": "base-windows",
            "condition": {
                "type": "equals",
                "lhs": "${hostSystemName}",
                "rhs": "Windows"
            }
        }
    ]
}
